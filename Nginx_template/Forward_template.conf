############################################
#
# 以下文件做为转发服务器nginx的配置文件之 upstream 块设置
#
############################################

# weight 表示权重，值越大表示权重越高，优先级越高，被访问到的次数越多，缺省值为1
# max_fails 表示允许最大失败次数，缺省值为1
# fail_timeout 缺省值为10,单位s(加不加s都可以)
#当 fail_timeout 时间内失败了 max_fails 次请求，则认为该上游服务器不可用/不存活，然后将摘掉该上游服务器，fail_timeout 时间后会再次将该服务器加入到存活上游服务器列表进行重试。

# staticServer80 为静态服务器(nginx)的集合，负载均衡服务节点(http协议80端口)，或者提供 listen 80 然后跳转到443
# staticServer443 为静态服务器(nginx)的集合，负载均衡服务节点(https协议443端口)
# 同一台静态服务器 可以同时开启 80 和 443 端口
# 为什么要有80 和 443 因为 转发的时候 80只能转发到80, 443 也只能转发到443.

upstream {{UPSTREAM_HTML80}} {
    #ip_hash; #让相同的客户端ip请求相同的服务器
    
    zone {{UPSTREAM_HTML80}} 1m;
    
    # server docker容器所在宿主机ip:宿主机端口（映射容器的80端口）
    # check 表示开启健康检查功能 需要编译安装 nginx_upstream_check_module 模块，不然会出错
    {{SERVERS_HTML80}}
    
}

upstream {{UPSTREAM_HTML443}} {
    #ip_hash; #让相同的客户端ip请求相同的服务器
    
    zone {{UPSTREAM_HTML443}} 1m;
    
    # server docker容器所在宿主机ip:宿主机端口（映射容器的443端口）
    # check 表示开启健康检查功能 需要编译安装 nginx_upstream_check_module 模块，不然会出错
    {{SERVERS_HTML443}}

}

upstream {{UPSTREAM_PHP}} {
    #ip_hash; #让相同的客户端ip请求相同的服务器
    
    zone {{UPSTREAM_PHP}} 1m;
    
    # server docker容器所在宿主机ip:宿主机端口（映射容器的9000端口）
    # check 表示开启健康检查功能 需要编译安装 nginx_upstream_check_module 模块，不然会出错
    {{SERVERS_PHP}}
    
}

#以下是 portainer 容器 upstream 配置
#{{PORTAINER_UPSTREAM}}
#以上是 portainer 容器 upstream 配置

############################################
#
# 以下文件做为转发服务器nginx的配置文件
#
############################################

#跳转实现：以下三种情况全部跳转到 https://www.xxx.com
#http://xxx.com
#http://www.xxx.com
#https://xxx.com

#为了实现 http 跳转到 https
#http://xxx.com 和 http://www.xxx.com 跳转到 https://www.xxx.com
server {
    listen {{PORT}};
    listen [::]:{{PORT}};
    server_name {{DOMAIN}} {{ALIAS}}; #绑定域名（前面xxx.com是域名，后面www.xxx.com是别名）
    rewrite ^(.*)$ https://{{ALIAS}}$1 permanent;
    #return 301 https://{{ALIAS}}$request_uri;#效果同 rewrite

}


#实现 一级域xxx.com 跳转到 二级域www.xxx.com
#https://xxx.com 跳转到 https://www.xxx.com
server {
    listen {{SSLPORT}} ssl http2;
    listen [::]:{{SSLPORT}} ssl http2;
    server_name {{DOMAIN}}; #绑定域名
    #开启 SSL
    ssl_certificate     /ssl/{{DOMAIN}}/cert.pem;
    ssl_certificate_key /ssl/{{DOMAIN}}/key.pem;
    rewrite ^(.*)$ https://{{ALIAS}}$1 permanent;
    #return 301 https://{{ALIAS}}$request_uri;#效果同 rewrite
}

#https://www.xxx.com 最终页面
server {
    listen {{SSLPORT}} ssl http2;
    listen [::]:{{SSLPORT}} ssl http2;
    server_name {{ALIAS}}; #绑定域名
    
    index index.html index.htm index.php; #默认文件
    #网站目录，即本nginx容器中的目录（本 nginx 为转发，当http://xxx.com后不指定文件时会出现错误，所以必须要有此设置）
    root {{ROOT}};
    server_tokens off;  #隐藏nginx版本号
    
    access_log /var/log/nginx/{{DOMAIN}}.443.f.access.log main;
    error_log  /var/log/nginx/{{DOMAIN}}.443.f.error.log error;
    
    # 开启 OCSP stapling
    ssl_stapling on;
    # 验证OCSP响应是否可信
    ssl_stapling_verify on;
    # 将OCSP响应缓存到磁盘上，这样即使服务器重启，OCSP响应也不会丢失（使用 openssl ocsp 命令生成）
    #ssl_stapling_file /ssl/{{DOMAIN}}/stapling_file.ocsp;
    # resolver: 配置 DNS 解析器，用于获取 OCSP 响应。valid: 指定 OCSP 响应缓存的有效时间。
    #resolver 8.8.8.8 8.8.4.4 valid=300s;
    # 指定解析器超时时间
    #resolver_timeout 5s;
    # 提供CA证书链，用于验证OCSP响应。如果有多个CA证书，用空格分隔
    #ssl_trusted_certificate /ssl/{{DOMAIN}}/ca.pem;
    
    #开启 SSL
    ssl_certificate     /ssl/{{DOMAIN}}/cert.pem;
    ssl_certificate_key /ssl/{{DOMAIN}}/key.pem;
    
    #开启 HSTS
    add_header Strict-Transport-Security "max-age=31536000";
    
    # 展示 check_upstream 模块检测上游服务器的状态  https://www.xxx.com/status
    location /status {
        check_status;
        access_log off;
    }
    
    # 展示 dynamic_upstream 模块返回的上游服务器的状态  https://www.xxx.com/dynamic
    location /dynamic {
        dynamic_upstream;
    }
    
    # yourls 短链接跳转重写规则
    #location / {
    #    try_files $uri $uri/ /yourls-loader.php$is_args$args; # $is_args 表示 ? 号
    #}
    
    #检测文件是否存在
    #访问 xxx.com 下的 abc 文件，会依次按自定义的顺序进行查找。
    #xxx.com/abc
    #xxx.com/abc.html
    #xxx.com/abc/index.html
    #xxx.com/default.html
    #location / {
    #    try_files $uri $uri.html $uri/index.html /default.html;
    #}
    
    #实现https://xxx.com/post/abc.php隐藏php后缀的效果，即：https://xxx.com/post/abc, 当目录post下有目录abc时，就会出错
    #location / {
    #    try_files $uri $uri/ $uri.php?$args;
    #}
    
    #php 动态页面转发规则
    location ~ .*\.(php)$ {
        root /var/www/html/{{DOMAIN}}; #指向 phpfpmhost 服务器上的 /var/www/html/xxx.com/xxx.php
        fastcgi_pass {{UPSTREAM_PHP}};
        fastcgi_index index.php;
        # 开启拦截 php-fpm 页面错误，如果有错误就转到 error_page 设置的错误页面
        fastcgi_intercept_errors on;
        include fastcgi_params;#/etc/nginx/fastcgi_params
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        proxy_set_header Host $host;
    
    }
    
    #html 静态页面转发规则
    location ~ .*\.(html|htm)$ {
        proxy_pass https://{{UPSTREAM_HTML443}}; #指向地址 https://staticServer443/etc/nginx/html/xxx.com/xxx.html
        proxy_set_header Host $host;
        # 开启拦截 proxy_pass 页面错误，如果有错误就转到 error_page 设置的错误页面
        proxy_intercept_errors on;
        #当 upstream 中的某个服务器发生了 错误、超时、返回500状态码等异常时，转向下一台服务器
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504 http_404;
    }
    
    #以下是用于 portainer 配置，并且只能放在这里，不然页面会卡住无法进入登陆界面
    #{{PORTAINER_CONF}}
    #以上是用于 portainer 配置
    
    #把图片格式转发到静态服务器上，比如 https://xxx.com/b/cat.png 转发给 https://staticServer443/b/cat.png
    #注意：转发服务器上可以没有 /b/cat.png 但静态服务器上一定要有 /b/cat.png 不然就会404
    #以下的前提是静态服务器上没有对图片添加规则,如果添加了规则，最终图片路径还要看静态服务器上规则。
    
    location ~ .*\.(gif|jpg|jpeg|png|bmp)$ {
        proxy_pass https://{{UPSTREAM_HTML443}};
        proxy_set_header Host $host;
        proxy_intercept_errors on;
    }
    
    location ~ .*\.(js|css)$ {
        proxy_pass https://{{UPSTREAM_HTML443}};
        proxy_set_header Host $host;
        proxy_intercept_errors on;
    }
    
    # 如果从github pull 下来 静态页,会有.git文件夹,可以访问到里面的文件并下载,这里禁止访问,并返回404
    location /.git/ {
        deny all;
        return 404;
    
    }
    
    # error_page [状态值,可以有多个用空格分隔] [指定路径]
    
    # 当php服务器关闭时 php 失效，当静态服务器关闭时 html 失效。所以不推荐此种写法
    # error_page 500 502 /errpage/502.php; #/etc/nginx/html/xxx.com/errpage/502.php
    # error_page 404 400 /errpage/404.html; #/etc/nginx/html/xxx.com/errpage/404.html
    
    #推荐下面写法，使用 html 文件（文件只需要存在转发服务器上即可），只要转发服务器没有挂掉，就可以运行
    error_page 500 /500.html;
    error_page 502 /502.html;
    error_page 400 /400.html;
    error_page 404 /404.html;
    
    location = /500.html{
        root /etc/nginx/html/{{DOMAIN}}/errpage; # 文件只需要存在转发服务器上即可
    }
    
    location = /502.html{
        root /etc/nginx/html/{{DOMAIN}}/errpage;
    }
    
    location = /400.html{
        root /etc/nginx/html/{{DOMAIN}}/errpage;
    }
    
    location = /404.html{
        root /etc/nginx/html/{{DOMAIN}}/errpage;
    }

}
